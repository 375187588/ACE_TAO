/*
 * IDL v4 supported Annotation Application Situations
 */

// Module Declaration
@test_module_ant
module Test_Module {

  // Sequence Type Parameter
  typedef sequence<@test_seq_param_ant short, 5> test_seq_t;

  // Constant Declarations
  @test_const_ant
  const short test_const = 5;

  // Struct Declaration
  @test_struct_ant
  struct Test_Struct_1 {

    // Multiple Annotations on a Struct Member
    @test_member_ant_1
    @test_member_ant_2
    short test_member_1;

    // Multiple Annotations with Parameters on a Struct Member
    @test_member_ant_params_1(1)
    @test_member_ant_params_2(x = 2)
    @test_member_ant_params_3(x = 1 + 2)
    @test_member_ant_params_4(x = 2 + 3, y = "Hello World")
    short test_member_2;

    // Scoped Named Annotations
    @test_ns_1::test_ant_1
    @test_ns_1::test_ns_2::test_ant_1
    @test_ns_1::test_ns_2::test_ns_3::test_ant_1
    @::test_ns_1::test_ant_1
    @::test_ns_1::test_ns_2::test_ant_1
    @::test_ns_1::test_ns_2::test_ns_3::test_ant_1
    short test_member_3;

    // Annotation on a typedefed type
    @test_typedefed_member
    test_seq_t test_seq;
  };

  // Annotations on a Union and a Union Discriminator
  @test_union_ant
  union Test_Union switch (@test_union_discrim_ant short) {
    case 0:
    case 1:
      // Annotation on a Union Member
      @test_union_member_ant short union_member_1;
    default:
      short union_member_2;
  };

  // Annotation on an Enum
  @test_enum_ant
  enum Test_Enum {
    TEST_ENUM_MEMBER_1,
    // Annotation on an Enumerator
    @test_enum_member_ant TEST_ENUM_MEMBER_2,
    TEST_ENUM_MEMBER_3
  };
};
